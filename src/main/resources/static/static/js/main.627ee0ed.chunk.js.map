{"version":3,"sources":["logo.svg","components/LastMatches.jsx","components/EloLadder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LastMatches","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","matches","currPage","_this2","fetch","process","mode","then","res","json","setState","slice","map","match","timestamp","winner_name","winner","id","loser_name","loser","catch","err","console","error","react_default","a","createElement","e","i","key","utcString","date","Date","toDateString","toTimeString","split","formatDate","React","Component","EloLadder","players","page","arguments","length","undefined","getData","_embedded","rows","JSON","parse","stringify","className","name","elo","splice","App","components_EloLadder","components_LastMatches","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.627ee0ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst getData = () => fetch(process.env.REACT_APP_REPO_URL + \"/lastMatches\", { mode: \"cors\" }).then(res => res.json())\r\n\r\nconst formatDate = utcString => {\r\n    const date = new Date(utcString)\r\n\r\n    let day = date.toDateString(),\r\n        time = date.toTimeString().split(\"GMT\")[0]\r\n    return day + \", \" + time\r\n}\r\nconst numLastMatches = 10\r\nclass LastMatches extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {matches: [], currPage: 0}\r\n    }\r\n\r\n    componentDidMount() {\r\n        getData(this.state.currPage)\r\n            .then(res => {\r\n                this.setState({matches: res.slice(0, numLastMatches).map(match => ({timestamp: match.timestamp, winner_name: match.winner.id, loser_name: match.loser.id}))})\r\n            }).catch(err => console.error(\"Error fetching ladder:\", err))\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <div id=\"last-matches-header\">Last {numLastMatches} Matches</div>\r\n            {this.state.matches.map((e, i) => <div key={i}>{formatDate(e.timestamp) + \": \" + e.winner_name + \" vs \" + e.loser_name}</div>)}\r\n        </div>\r\n    }\r\n}\r\nexport default LastMatches\r\n","import React from 'react'\r\n\r\nconst getData = (page=0) => fetch(process.env.REACT_APP_REPO_URL + \"/players?sort=elo,desc&page=\" + page, { mode: \"cors\" }).then(res => res.json())\r\n\r\nclass EloLadder extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {players: [], currPage: 0}\r\n    }\r\n\r\n    componentDidMount() {\r\n        getData(this.state.currPage)\r\n            .then(res => {\r\n                this.setState({players: res._embedded.players})\r\n            }).catch(err => console.error(\"Error fetching ladder:\", err))\r\n    }\r\n\r\n    render() {\r\n        let rows = JSON.parse(JSON.stringify(this.state.players)).map((e, i) => <div key={i} className=\"ladder-row\">\r\n                <div>{e.name}</div><div>{e.elo}</div>\r\n            </div>)\r\n        for (let i = 5; i < rows.length; i = i + 6) {\r\n            rows.splice(i, 0, <span className=\"ladder-row-hline\"></span>)\r\n        }\r\n        return <div>\r\n            <div id=\"ladder-header\">Elo Ladder</div>\r\n            <div id=\"ladder\">\r\n            {rows}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nexport default EloLadder\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport LastMatches from './components/LastMatches'\nimport EloLadder from './components/EloLadder'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n            <EloLadder />\n            <LastMatches />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}